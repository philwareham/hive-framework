@use "../setup";

/* purgecss start ignore */

/* Layout helpers
   ========================================================================== */

/**
 * Clearfix using the 'A new micro clearfix hack' method.
 */

.clearfix::after {
    content: "";
    display: table;
    clear: both;
}

/**
 * Basic float clearers.
 */

.clear,
.clear-both {
    clear: both;
}

.clear-left {
    clear: left;
}

.clear-inline-start {
    clear: inline-start;
}

.clear-right {
    clear: right;
}

.clear-inline-end {
    clear: inline-end;
}

/**
 * Float nullifier.
 */

.float-none {
    float: none;
}

/**
 * Force blocks.
 */

.block {
    display: block;
}

/**
 * Force inline blocks.
 */

.inline-block {
    display: inline-block;
}

/**
 * Block-level element alignment/justification.
 *
 * Example HTML:
 *
 * <p class="align-left">
 * <p class="align-right">
 * <p class="align-center">
 * <p class="align-justify">
 */

address,
article,
aside,
blockquote,
dd,
details,
dialog,
div,
dl,
dt,
fieldset,
figcaption,
figure,
footer,
form,
h1,
h2,
h3,
h4,
h5,
h6,
header,
li,
main,
nav,
ol,
p,
pre,
section,
table,
ul {
    &.align-left {
        text-align: left;
    }

    &.align-inline-start {
        text-align: start;
    }

    &.align-right {
        text-align: right;
    }

    &.align-inline-end {
        text-align: end;
    }

    &.align-center,
    &.align-inline-center {
        text-align: center;
    }

    &.align-justify,
    &.align-inline-justify {
        text-align: justify;
    }
}

/**
 * Inline-level element vertical alignment.
 */

$align-types: baseline, top, middle, bottom, text-top, text-bottom;

@each $align-type in $align-types {
    .align-#{$align-type} {
        vertical-align: $align-type;
    }
}

/**
 * User-defined margins (inspired by Twitter Bootstrap).
 */

$m-measures: (
    0: 0,
    1: 1rem,
    2: 2rem,
    3: 3rem,
    4: 4rem,
    5: 5rem,
    auto: auto
);

@each $name, $value in $m-measures {
    .m-#{$name} {
        margin: $value;
    }
}

@each $name, $value in $m-measures { // TODO: use `margin-inline` shorthand when browser support is more widespread.
    .mx-#{$name} {
        margin-inline-start: $value;
        margin-inline-end: $value;
    }
}

@each $name, $value in $m-measures { // TODO: use `margin-block` shorthand when browser support is more widespread.
    .my-#{$name} {
        margin-block-start: $value;
        margin-block-end: $value;
    }
}

@each $name, $value in $m-measures {
    .mt-#{$name} {
        margin-block-start: $value;
    }
}

@each $name, $value in $m-measures {
    .mb-#{$name} {
        margin-block-end: $value;
    }
}

@each $name, $value in $m-measures {
    .ms-#{$name} {
        margin-inline-start: $value;
    }
}

@each $name, $value in $m-measures {
    .me-#{$name} {
        margin-inline-end: $value;
    }
}

/**
 * User-defined paddings (inspired by Twitter Bootstrap).
 */

$p-measures: (
    0: 0,
    1: 1rem,
    2: 2rem,
    3: 3rem,
    4: 4rem,
    5: 5rem
);

@each $name, $value in $p-measures {
    .p-#{$name} {
        padding: $value;
    }
}

@each $name, $value in $p-measures { // TODO: use `padding-inline` shorthand when browser support is more widespread.
    .px-#{$name} {
        padding-inline-start: $value;
        padding-inline-end: $value;
    }
}

@each $name, $value in $p-measures { // TODO: use `padding-block` shorthand when browser support is more widespread.
    .py-#{$name} {
        padding-block-start: $value;
        padding-block-end: $value;
    }
}

@each $name, $value in $p-measures {
    .pt-#{$name} {
        padding-block-start: $value;
    }
}

@each $name, $value in $p-measures {
    .pb-#{$name} {
        padding-block-end: $value;
    }
}

@each $name, $value in $p-measures {
    .ps-#{$name} {
        padding-inline-start: $value;
    }
}

@each $name, $value in $p-measures {
    .pe-#{$name} {
        padding-inline-end: $value;
    }
}

/* purgecss end ignore */
